<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2025-05-28 15:20:30              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Services; use Carbon\Carbon; use App\Models\Package; use Illuminate\Support\Arr; use Illuminate\Support\Str; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; use Illuminate\Support\MessageBag; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Schema; use Illuminate\Support\Facades\Artisan; class PackageInstaller { public $package; public $slug; public $namespace; public $path; public $migrations; public function __construct(Request $request, array $installable) { $this->package = array_merge($installable, $request->all()); $this->slug = $installable["\x73\154\x75\147"]; $this->namespace = "\134\111\156\x63\x65\166\x69\157\134\120\x61\x63\x6b\x61\147\145\x5c" . Str::studly(Str::replace("\x2d", "\137", $this->slug)); $this->path = $installable["\160\141\x74\x68"]; $this->migrations = str_replace(base_path(), '', $this->path . "\57\x64\x61\164\x61\142\141\163\145\57\x6d\x69\x67\x72\141\x74\151\x6f\x6e\x73"); } public function install() { Log::info("\111\x6e\x73\164\141\154\154\151\x6e\147\x20\160\141\143\153\x61\147\x65\40" . $this->slug); try { $package_data = array_merge($this->package, preparePackageInstallation($this->package)); Package::create($package_data); $this->migrate()->seed(); } catch (\Exception $exception) { Log::info("\120\x61\x63\153\x61\147\145\40\x69\x6e\163\x74\x61\x6c\x6c\x61\x74\x69\x6f\x6e\x20\146\x61\151\x6c\x65\x64\x20" . $this->slug); Log::error(get_exception_message($exception)); throw new \Exception("\x50\141\143\153\141\147\145\40\111\156\163\164\141\154\154\141\x74\x69\157\x6e\40\x46\141\x69\x6c\x65\x64\40" . $this->slug); } Log::info("\123\165\x63\x63\x65\x73\x73\x66\165\x6c\x6c\x79\40\151\156\x73\164\x61\x6c\x6c\x65\x64\40\160\141\143\x6b\141\147\x65\x20" . $this->slug); return true; } public function upgrade() { Log::info("\125\x70\147\162\141\144\x65\151\156\x67\40\160\x61\143\x6b\x61\147\x65\x20" . $this->slug); $package = Package::where("\163\x6c\165\147", $this->slug)->firstOrFail(); $this->package = array_merge($package->toArray(), $this->package); try { $package_data = array_merge($this->package, preparePackageInstallation($this->package)); $package->update(["\156\x61\155\x65" => $package_data["\156\141\155\x65"], "\144\145\x73\143\x72\151\x70\x74\151\157\156" => $package_data["\x64\x65\x73\143\162\x69\x70\x74\x69\157\156"], "\x63\x6f\155\x70\x61\x74\x69\142\154\x65" => $package_data["\143\157\155\x70\x61\x74\x69\x62\x6c\x65"], "\x76\145\162\163\x69\157\156" => $package_data["\x76\145\x72\163\x69\x6f\156"], "\x69\x63\x6f\x6e" => $package_data["\151\x63\x6f\x6e"], "\144\x65\160\x65\156\144\x65\156\143\171" => $package_data["\144\145\160\145\156\144\x65\x6e\x63\x79"], "\165\160\144\x61\x74\145\x64\x5f\x61\x74" => Carbon::Now()]); $this->migrate(); } catch (\Exception $exception) { Log::info("\120\x61\143\153\x61\147\x65\x20\x75\x70\147\162\145\x61\144\x61\164\151\x6f\x6e\40\x66\141\151\x6c\x65\x64\x20" . $this->slug); Log::error(get_exception_message($exception)); throw new \Exception("\120\141\x63\x6b\141\x67\145\x20\x75\x70\147\x72\141\x64\x61\x74\x69\x6f\x6e\40\146\141\151\154\145\x64\40" . $this->slug); } Log::info("\x53\x75\x63\143\145\x73\x73\146\165\x6c\x6c\x79\40\165\160\x67\162\x61\144\x65\144\x20\160\x61\x63\x6b\141\x67\145\40" . $this->slug); return true; } public function migrate() { Log::info("\x4d\151\x67\x72\x61\164\x69\x6f\156\x20\x73\164\141\x72\x74\x65\x64\x20\146\x6f\x72\x20" . $this->slug); Artisan::call("\x6d\151\x67\162\x61\164\x65", ["\55\55\160\141\x74\150" => $this->migrations, "\x2d\x2d\146\x6f\x72\x63\145" => true]); Log::info(Artisan::output()); return $this; } private function seed() { Log::info("\123\x65\x65\x64\151\156\147\40\x70\141\143\153\x61\147\145\x20\x64\141\x74\x61\x20\x66\157\162\x20" . $this->slug); foreach (glob($this->path . "\x2f\x64\141\164\141\142\x61\x73\x65\x2f\x73\x65\145\x64\163\57\52\x2e\160\x68\160") as $filename) { $classes = get_declared_classes(); include $filename; $temp = array_diff(get_declared_classes(), $classes); $migration = Arr::last($temp, function ($value, $key) { return $value !== "\x49\x6c\x6c\165\155\151\x6e\x61\164\145\134\104\x61\x74\x61\x62\141\163\145\x5c\x53\x65\145\144\x65\162"; }); Artisan::call("\x64\142\x3a\163\x65\145\x64", ["\x2d\x2d\143\154\141\163\163" => $migration, "\55\55\x66\157\162\x63\145" => true]); Log::info(Artisan::output()); CWtib: } TUbJ7: return $this; } public function uninstall() { Log::info("\125\x6e\x69\156\x73\164\x61\154\x6c\x69\156\x67\40\x50\x61\143\153\141\147\145\72\x20" . $this->slug); $file = $this->path . "\57\x73\162\143\57\125\x6e\151\x6e\x73\164\x61\x6c\x6c\x65\162\56\x70\150\x70"; if (!file_exists($file)) { goto SuHiA; } include $file; SuHiA: $class = $this->namespace . "\x5c\x55\x6e\x69\x6e\x73\164\141\154\154\x65\x72"; if (class_exists($class)) { goto V3OE2; } Log::info("\125\156\151\156\x73\x74\x61\154\154\x65\x72\x20\156\157\x74\40\146\x6f\x75\156\x64\x20\151\156\x20\164\x68\x65\40\x70\x61\x63\x6b\141\147\x65\x20\144\151\x72\x20\146\x6f\x72\x20" . $this->slug); throw new \Exception("\x55\x6e\x69\x6e\x73\164\x61\154\x6c\x65\162\x20\x6e\157\x74\x20\146\x6f\165\156\x64\x20\x66\x6f\x72\40\164\150\145\x20\160\x61\x63\153\x61\147\x65\40" . $this->slug); V3OE2: try { (new $class())->cleanDatabase(); $this->rollback(); } catch (\Exception $e) { Log::info("\x50\x61\x63\153\141\x67\145\x20\x75\156\151\156\x73\164\141\x6c\x6c\141\x74\x69\x6f\x6e\x20\x66\x61\151\x6c\145\x64\x3a\x20" . $this->slug); Log::error($e); throw new \Exception("\x55\x6e\151\x6e\163\164\141\154\154\141\164\151\157\x6e\x20\146\141\x69\154\x65\144\x3a\40" . $this->slug); } Log::info("\x53\x75\143\143\x65\x73\163\x66\165\x6c\154\x79\40\165\156\x69\156\x73\x74\141\154\154\x65\x64\x20\x70\x61\143\153\x61\x67\x65\x20" . $this->slug); return $this; } private function rollback() { Log::info("\122\x6f\154\x6c\40\142\141\x63\153\40\143\x61\154\x6c\x65\144\x2e\56\x2e"); $migrations = array_reverse(glob($this->path . "\x2f\144\141\x74\x61\x62\141\163\145\x2f\x6d\151\147\x72\141\x74\151\157\156\x73\57\x2a\x5f\x2a\56\x70\150\x70")); if (!empty($migrations)) { goto fDdfD; } Log::info("\116\157\x20\155\x69\147\162\x61\x74\x69\157\156\x20\164\157\40\x72\x6f\x6c\154\40\x62\x61\x63\x6b\40\146\157\x72\40\160\x61\143\x6b\x61\x67\x65\40" . $this->slug); return $this; fDdfD: Schema::disableForeignKeyConstraints(); DB::statement("\123\105\124\x20\x46\x4f\122\x45\111\x47\116\x5f\x4b\x45\131\137\x43\110\105\x43\113\x53\40\x3d\x20\x30"); foreach ($migrations as $filename) { $migration = str_replace("\x2e\x70\x68\160", '', basename($filename)); Log::info("\x52\157\x6c\x6c\x69\156\147\40\142\141\x63\153\x3a\40" . $migration); $row = DB::table("\155\151\x67\162\141\164\x69\157\x6e\x73")->where("\155\151\x67\x72\141\x74\x69\x6f\156", $migration); if ($row->first()) { goto QtrsE; } Log::info($migration . "\x20\167\141\163\40\x6e\157\164\x20\155\x69\147\x72\x61\164\145\144\40\142\145\146\x6f\162\x65\x2c\40\x70\162\157\x62\141\x62\154\x79\x20\x69\x74\134\47\163\40\141\x20\156\x65\x77\40\155\x69\147\x72\141\x74\x69\x6f\x6e\40\146\151\154\x65\x2e"); Log::info("\x53\x6b\151\160\160\151\x6e\147\40\162\x6f\154\x6c\x65\144\40\142\141\143\153\72\40" . $migration); goto D1Vl8; QtrsE: $class = Str::studly(implode("\137", array_slice(explode("\137", $migration), 4))); if (class_exists($class)) { goto sfFuo; } include $filename; sfFuo: (new $class())->down(); if ($row->delete()) { goto RlWos; } Log::info("\x52\157\x6c\x6c\x62\141\143\153\40\x46\x41\111\114\105\x44\x3a\40" . $migration); throw new \Exception("\x4d\x69\147\162\x61\x74\151\x6f\x6e\40\162\x6f\x6c\154\142\x61\143\153\x20\146\141\151\154\145\x64\72\40" . $this->slug); goto XPgx5; RlWos: Log::info("\122\x6f\154\154\145\144\x20\x62\141\143\x6b\72\x20" . $migration); XPgx5: D1Vl8: } TuZn3: Schema::enableForeignKeyConstraints(); DB::statement("\123\x45\124\40\106\x4f\122\x45\x49\x47\x4e\137\113\105\131\x5f\103\110\105\103\113\x53\x20\75\40\61"); Log::info("\x41\x6c\x6c\x20\155\x69\147\x72\141\x74\151\157\x6e\163\x20\150\141\163\40\x62\145\x65\x6e\40\162\x6f\x6c\154\145\144\40\142\141\143\153\x20\146\157\162\40\160\x61\x63\x6b\141\x67\x65\40" . $this->slug); return $this; } }