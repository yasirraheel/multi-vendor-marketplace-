<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2025-05-28 15:20:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\x6d\x69\147\162\x61\164\x65", ["\55\55\146\157\162\x63\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\x72\x72\157\x72", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\x64\x62\x3a\163\x65\x65\144", ["\55\55\x66\x6f\x72\x63\145" => true], $outputLog); Artisan::call("\x69\x6e\143\145\x76\151\x6f\72\x67\x65\x6e\x65\x72\x61\x74\145\55\x6b\145\171", ["\55\55\x66\157\x72\143\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\x65\x72\162\x6f\162", $outputLog); } return $this->response(trans("\151\156\163\x74\141\154\154\145\162\x5f\155\145\163\x73\141\x67\x65\x73\56\146\x69\156\141\154\56\x66\x69\156\151\163\x68\145\144"), "\163\x75\x63\x63\x65\x73\x73", $outputLog); } public function seedDemoData() { ini_set("\155\141\170\x5f\145\x78\x65\x63\x75\x74\151\x6f\x6e\x5f\x74\x69\155\145", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\151\x6e\x63\145\166\x69\157\x3a\144\145\155\157"); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\x72\x6f\162", $outputLog); } return $this->response(trans("\x69\x6e\163\164\141\154\154\145\x72\x5f\155\x65\x73\163\x61\x67\x65\163\x2e\146\x69\156\141\x6c\x2e\146\x69\x6e\x69\x73\150\145\144"), "\x73\x75\143\x63\145\x73\x73", $outputLog); } private function response($message, $status, $outputLog) { return ["\x73\x74\x61\x74\x75\x73" => $status, "\x6d\x65\x73\163\x61\x67\x65" => $message, "\144\x62\117\165\164\160\x75\164\114\x6f\x67" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto txYjY; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto uCZL_; } touch($database); DB::reconnect(Config::get("\x64\141\x74\x61\x62\x61\163\145\56\x64\145\146\141\x75\x6c\x74")); uCZL_: $outputLog->write("\x55\163\151\x6e\x67\40\123\161\x6c\x4c\x69\x74\x65\x20\144\x61\x74\x61\142\x61\163\145\72\x20" . $database, 1); txYjY: } }
